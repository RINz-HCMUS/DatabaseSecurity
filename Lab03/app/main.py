import pyodbc 
import ttkbootstrap as ttk 
from ttkbootstrap.constants import *
from tkinter import messagebox, Toplevel 
import tkinter as tk

# üîπ C·∫•u h√¨nh k·∫øt n·ªëi SQL Server
DB_CONFIG = {
    "driver": "{SQL Server}",
    "server": "localhost\\LABSQL",
    "database": "QLSVNhom",
    "uid": "sa",
    "pwd": "123456789"
}

current_manv = None
current_pubkey = None
current_password = None  # L∆∞u m·∫≠t kh·∫©u c·ªßa nh√¢n vi√™n sau ƒëƒÉng nh·∫≠p

# üîπ K·∫øt n·ªëi SQL Server
def connect_db():
    try:
        conn = pyodbc.connect(
            f"DRIVER={DB_CONFIG['driver']};"
            f"SERVER={DB_CONFIG['server']};"
            f"DATABASE={DB_CONFIG['database']};"
            f"UID={DB_CONFIG['uid']};"
            f"PWD={DB_CONFIG['pwd']};"
        )
        return conn
    except Exception as e:
        messagebox.showerror("L·ªói k·∫øt n·ªëi", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi SQL Server: {e}")
        return None

# =================== GIAO DI·ªÜN ƒêƒÇNG NH·∫¨P ======================

def login():
    global current_manv, current_pubkey, current_password

    manv = entry_username.get()
    password = entry_password.get()
    current_password = password

    conn = connect_db()
    if not conn:
        return

    cursor = conn.cursor()
    # So s√°nh m·∫≠t kh·∫©u sau khi bƒÉm (SHA1)
    cursor.execute("SELECT MANV, PUBKEY FROM NHANVIEN WHERE MANV = ? AND MATKHAU = HASHBYTES('SHA1', ?)", (manv, password))
    result = cursor.fetchone()
    conn.close()

    if result:
        current_manv = result[0]
        current_pubkey = result[1]
        messagebox.showinfo("ƒêƒÉng nh·∫≠p th√†nh c√¥ng", f"Xin ch√†o nh√¢n vi√™n {current_manv}")
        open_main_window()
    else:
        messagebox.showerror("L·ªói", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")

# =================== GIAO DI·ªÜN CH√çNH ======================
def open_main_window():
    login_window.destroy()
    main_window = ttk.Window(themename="cosmo")
    main_window.title(f"Qu·∫£n l√Ω Nh√¢n vi√™n - {current_manv}")
    main_window.geometry("1280x720")

    main_frame = ttk.Frame(main_window)
    main_frame.pack(fill="both", expand=True, padx=10, pady=10)

    ttk.Label(main_frame, text=f"Xin ch√†o Nh√¢n vi√™n {current_manv}", font=("Arial", 16, "bold")).grid(row=0, column=0, columnspan=2, pady=20)

    ttk.Button(main_frame, text="Qu·∫£n l√Ω L·ªõp h·ªçc", command=manage_classes, bootstyle="primary").grid(row=1, column=0, padx=10, pady=5, sticky="ew")
    ttk.Button(main_frame, text="Qu·∫£n l√Ω Sinh vi√™n", command=manage_students, bootstyle="info").grid(row=1, column=1, padx=10, pady=5, sticky="ew")
    ttk.Button(main_frame, text="Qu·∫£n l√Ω B·∫£ng ƒëi·ªÉm", command=manage_grades, bootstyle="success").grid(row=2, column=0, padx=10, pady=5, sticky="ew")
    ttk.Button(main_frame, text="Tho√°t", command=main_window.quit, bootstyle="danger").grid(row=2, column=1, padx=10, pady=5, sticky="ew")

    main_frame.columnconfigure(0, weight=1)
    main_frame.columnconfigure(1, weight=1)

    main_window.mainloop()

# =================== QU·∫¢N L√ù L·ªöP H·ªåC ======================
def manage_classes():
    class_win = Toplevel()
    class_win.title("Qu·∫£n l√Ω L·ªõp h·ªçc")
    class_win.geometry("1280x720")

    # Frame ch·ª©a treeview
    frame = ttk.Frame(class_win)
    frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
    class_win.rowconfigure(0, weight=1)
    class_win.columnconfigure(0, weight=1)

    columns = ("M√£ l·ªõp", "T√™n l·ªõp")
    tree = ttk.Treeview(frame, columns=columns, show="headings")
    for col in columns:
        tree.heading(col, text=col)
    tree.grid(row=0, column=0, sticky="nsew")
    frame.rowconfigure(0, weight=1)
    frame.columnconfigure(0, weight=1)

    # N·∫°p d·ªØ li·ªáu l·ªõp c·ªßa nh√¢n vi√™n ƒëang ƒëƒÉng nh·∫≠p
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("SELECT MALOP, TENLOP FROM LOP WHERE MANV = ?", (current_manv,))
        for row in cursor.fetchall():
            tree.insert("", "end", values=(row[0], row[1]))
        conn.close()

    # Frame ch·ª©a n√∫t thao t√°c
    btn_frame = ttk.Frame(class_win)
    btn_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=5)
    btn_frame.columnconfigure((0,1,2), weight=1)

    def get_selected_class():
        sel = tree.focus()
        if not sel:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ch·ªçn l·ªõp c·∫ßn thao t√°c!")
            return None
        return tree.item(sel, "values")

    def view_students():
        sel = get_selected_class()
        if sel:
            malop = sel[0]
            view_class_students(malop)

    def edit_class_action():
        sel = get_selected_class()
        if sel:
            malop = sel[0]
            edit_class(malop)

    ttk.Button(btn_frame, text="View Students", command=view_students, bootstyle="info").grid(row=0, column=0, padx=5)
    ttk.Button(btn_frame, text="Edit Class", command=edit_class_action, bootstyle="warning").grid(row=0, column=1, padx=5)
    ttk.Button(btn_frame, text="Add New Class", command=add_class, bootstyle="success").grid(row=0, column=2, padx=5)

def view_class_students(malop):
    win = Toplevel()
    win.title(f"DS Sinh vi√™n c·ªßa l·ªõp {malop}")
    win.geometry("1280x720")

    frame = ttk.Frame(win)
    frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
    win.rowconfigure(0, weight=1)
    win.columnconfigure(0, weight=1)

    columns = ("M√£ SV", "H·ªç T√™n", "Ng√†y sinh", "ƒê·ªãa ch·ªâ")
    tree = ttk.Treeview(frame, columns=columns, show="headings")
    for col in columns:
        tree.heading(col, text=col)
    tree.grid(row=0, column=0, sticky="nsew")
    frame.rowconfigure(0, weight=1)
    frame.columnconfigure(0, weight=1)

    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("SELECT MASV, HOTEN, CONVERT(varchar, NGAYSINH, 23), DIACHI FROM SINHVIEN WHERE MALOP = ?", (malop,))
        for row in cursor.fetchall():
            tree.insert("", "end", values=row)
        conn.close()

def edit_class(malop):
    # M·ªü c·ª≠a s·ªï ch·ªânh s·ª≠a th√¥ng tin l·ªõp
    win = Toplevel()
    win.title(f"Ch·ªânh s·ª≠a l·ªõp {malop}")
    win.geometry("400x200")

    ttk.Label(win, text="T√™n l·ªõp:").grid(row=0, column=0, padx=10, pady=10, sticky="w")
    tenlop_entry = ttk.Entry(win)
    tenlop_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
    win.columnconfigure(1, weight=1)

    # N·∫°p th√¥ng tin l·ªõp hi·ªán t·∫°i
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("SELECT TENLOP FROM LOP WHERE MALOP = ?", (malop,))
        row = cursor.fetchone()
        if row:
            tenlop_entry.insert(0, row[0])
        conn.close()

    def update_class():
        new_tenlop = tenlop_entry.get().strip()
        if not new_tenlop:
            messagebox.showwarning("Ch√∫ √Ω", "T√™n l·ªõp kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE LOP SET TENLOP = ? WHERE MALOP = ?", (new_tenlop, malop))
            conn.commit()
            conn.close()
            messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin l·ªõp th√†nh c√¥ng!")
            win.destroy()

    def delete_class():
        # Ki·ªÉm tra xem l·ªõp c√≥ sinh vi√™n kh√¥ng
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM SINHVIEN WHERE MALOP = ?", (malop,))
            count = cursor.fetchone()[0]
            if count > 0:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ xo√° l·ªõp ƒë√£ c√≥ sinh vi√™n!")
            else:
                if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° l·ªõp n√†y kh√¥ng?"):
                    cursor.execute("DELETE FROM LOP WHERE MALOP = ?", (malop,))
                    conn.commit()
                    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ xo√° l·ªõp!")
                    win.destroy()
            conn.close()

    btn_frame = ttk.Frame(win)
    btn_frame.grid(row=1, column=0, columnspan=2, pady=10)
    ttk.Button(btn_frame, text="C·∫≠p nh·∫≠t", command=update_class, bootstyle="primary").grid(row=0, column=0, padx=5)
    ttk.Button(btn_frame, text="Xo√° l·ªõp", command=delete_class, bootstyle="danger").grid(row=0, column=1, padx=5)

def add_class():
    win = Toplevel()
    win.title("Th√™m l·ªõp m·ªõi")
    win.geometry("400x200")

    ttk.Label(win, text="M√£ l·ªõp:").grid(row=0, column=0, padx=10, pady=10, sticky="w")
    malop_entry = ttk.Entry(win)
    malop_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="T√™n l·ªõp:").grid(row=1, column=0, padx=10, pady=10, sticky="w")
    tenlop_entry = ttk.Entry(win)
    tenlop_entry.grid(row=1, column=1, padx=10, pady=10, sticky="ew")
    win.columnconfigure(1, weight=1)

    def add_new():
        malop = malop_entry.get().strip()
        tenlop = tenlop_entry.get().strip()
        if not malop or not tenlop:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            try:
                cursor.execute("INSERT INTO LOP (MALOP, TENLOP, MANV) VALUES (?, ?, ?)", (malop, tenlop, current_manv))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "Th√™m l·ªõp m·ªõi th√†nh c√¥ng!")
                win.destroy()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m l·ªõp: {e}")
            conn.close()

    ttk.Button(win, text="Th√™m l·ªõp", command=add_new, bootstyle="success").grid(row=2, column=0, columnspan=2, pady=10)

# =================== QU·∫¢N L√ù SINH VI√äN ======================
def manage_students():
    student_win = Toplevel()
    student_win.title("Qu·∫£n l√Ω Sinh vi√™n")
    student_win.geometry("700x400")

    # Frame ch·ª©a treeview hi·ªÉn th·ªã c√°c l·ªõp m√† nh√¢n vi√™n qu·∫£n l√Ω
    frame = ttk.Frame(student_win)
    frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
    student_win.rowconfigure(0, weight=1)
    student_win.columnconfigure(0, weight=1)

    columns = ("M√£ l·ªõp", "T√™n l·ªõp")
    tree = ttk.Treeview(frame, columns=columns, show="headings")
    for col in columns:
        tree.heading(col, text=col)
    tree.grid(row=0, column=0, sticky="nsew")
    frame.rowconfigure(0, weight=1)
    frame.columnconfigure(0, weight=1)

    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("SELECT MALOP, TENLOP FROM LOP WHERE MANV = ?", (current_manv,))
        for row in cursor.fetchall():
            tree.insert("", "end", values=row)
        conn.close()

    btn_frame = ttk.Frame(student_win)
    btn_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=5)
    btn_frame.columnconfigure((0,1,2), weight=1)

    def get_selected_class():
        sel = tree.focus()
        if not sel:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ch·ªçn l·ªõp!")
            return None
        return tree.item(sel, "values")

    def view_students_of_selected_class():
        sel = get_selected_class()
        if sel:
            malop = sel[0]
            view_students_of_class(malop)

    ttk.Button(btn_frame, text="View Students", command=view_students_of_selected_class, bootstyle="info").grid(row=0, column=0, padx=5)
    ttk.Button(btn_frame, text="Add New Student", command=lambda: add_student(), bootstyle="success").grid(row=0, column=1, padx=5)

def view_students_of_class(malop):
    win = Toplevel()
    win.title(f"DS Sinh vi√™n c·ªßa l·ªõp {malop}")
    win.geometry("700x400")

    frame = ttk.Frame(win)
    frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
    win.rowconfigure(0, weight=1)
    win.columnconfigure(0, weight=1)

    columns = ("M√£ SV", "H·ªç T√™n", "Ng√†y sinh", "ƒê·ªãa ch·ªâ")
    tree = ttk.Treeview(frame, columns=columns, show="headings")
    for col in columns:
        tree.heading(col, text=col)
    tree.grid(row=0, column=0, sticky="nsew")
    frame.rowconfigure(0, weight=1)
    frame.columnconfigure(0, weight=1)

    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("SELECT MASV, HOTEN, CONVERT(varchar, NGAYSINH, 23), DIACHI FROM SINHVIEN WHERE MALOP = ?", (malop,))
        for row in cursor.fetchall():
            tree.insert("", "end", values=row)
        conn.close()

    btn_frame = ttk.Frame(win)
    btn_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=5)
    btn_frame.columnconfigure((0,1), weight=1)

    def get_selected_student():
        sel = tree.focus()
        if not sel:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ch·ªçn sinh vi√™n!")
            return None
        return tree.item(sel, "values")

    def edit_student_action():
        sel = get_selected_student()
        if sel:
            masv = sel[0]
            edit_student(masv)

    ttk.Button(btn_frame, text="Edit Student", command=edit_student_action, bootstyle="warning").grid(row=0, column=0, padx=5)
    ttk.Button(btn_frame, text="Add New Student", command=lambda: add_student(malop), bootstyle="success").grid(row=0, column=1, padx=5)

def edit_student(masv):
    win = Toplevel()
    win.title(f"Ch·ªânh s·ª≠a sinh vi√™n {masv}")
    win.geometry("400x300")

    # L·∫•y th√¥ng tin sinh vi√™n
    conn = connect_db()
    if not conn:
        return
    cursor = conn.cursor()
    cursor.execute("SELECT HOTEN, CONVERT(varchar, NGAYSINH, 23), DIACHI, MALOP FROM SINHVIEN WHERE MASV = ?", (masv,))
    row = cursor.fetchone()
    conn.close()
    if not row:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y sinh vi√™n!")
        return

    ttk.Label(win, text="H·ªç T√™n:").grid(row=0, column=0, padx=10, pady=10, sticky="w")
    name_entry = ttk.Entry(win)
    name_entry.insert(0, row[0])
    name_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="Ng√†y sinh (YYYY-MM-DD):").grid(row=1, column=0, padx=10, pady=10, sticky="w")
    dob_entry = ttk.Entry(win)
    dob_entry.insert(0, row[1])
    dob_entry.grid(row=1, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="ƒê·ªãa ch·ªâ:").grid(row=2, column=0, padx=10, pady=10, sticky="w")
    address_entry = ttk.Entry(win)
    address_entry.insert(0, row[2])
    address_entry.grid(row=2, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="M√£ L·ªõp:").grid(row=3, column=0, padx=10, pady=10, sticky="w")
    class_entry = ttk.Entry(win)
    class_entry.insert(0, row[3])
    class_entry.grid(row=3, column=1, padx=10, pady=10, sticky="ew")

    win.columnconfigure(1, weight=1)

    def update_student():
        new_name = name_entry.get().strip()
        new_dob = dob_entry.get().strip()
        new_address = address_entry.get().strip()
        new_class = class_entry.get().strip()
        if not new_name or not new_dob or not new_address or not new_class:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE SINHVIEN
                SET HOTEN = ?, NGAYSINH = ?, DIACHI = ?, MALOP = ?
                WHERE MASV = ?
            """, (new_name, new_dob, new_address, new_class, masv))
            conn.commit()
            conn.close()
            messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t sinh vi√™n th√†nh c√¥ng!")
            win.destroy()

    ttk.Button(win, text="C·∫≠p nh·∫≠t", command=update_student, bootstyle="primary").grid(row=4, column=0, columnspan=2, pady=10)

def add_student(default_class=None):
    win = Toplevel()
    win.title("Th√™m sinh vi√™n m·ªõi")
    win.geometry("400x350")

    ttk.Label(win, text="M√£ SV:").grid(row=0, column=0, padx=10, pady=10, sticky="w")
    masv_entry = ttk.Entry(win)
    masv_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="H·ªç T√™n:").grid(row=1, column=0, padx=10, pady=10, sticky="w")
    name_entry = ttk.Entry(win)
    name_entry.grid(row=1, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="Ng√†y sinh (YYYY-MM-DD):").grid(row=2, column=0, padx=10, pady=10, sticky="w")
    dob_entry = ttk.Entry(win)
    dob_entry.grid(row=2, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="ƒê·ªãa ch·ªâ:").grid(row=3, column=0, padx=10, pady=10, sticky="w")
    address_entry = ttk.Entry(win)
    address_entry.grid(row=3, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="M√£ L·ªõp:").grid(row=4, column=0, padx=10, pady=10, sticky="w")
    class_entry = ttk.Entry(win)
    if default_class:
        class_entry.insert(0, default_class)
    class_entry.grid(row=4, column=1, padx=10, pady=10, sticky="ew")

    win.columnconfigure(1, weight=1)

    def add_new_student():
        masv = masv_entry.get().strip()
        name = name_entry.get().strip()
        dob = dob_entry.get().strip()
        address = address_entry.get().strip()
        malop = class_entry.get().strip()
        if not masv or not name or not dob or not address or not malop:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            try:
                # Gi·∫£ s·ª≠ m·∫≠t kh·∫©u kh·ªüi t·∫°o l√† '123456' v√† ƒë∆∞·ª£c m√£ h√≥a SHA1
                cursor.execute("""
                    INSERT INTO SINHVIEN (MASV, HOTEN, NGAYSINH, DIACHI, MALOP, TENDN, MATKHAU)
                    VALUES (?, ?, ?, ?, ?, ?, HASHBYTES('SHA1', ?))
                """, (masv, name, dob, address, malop, masv, '123456'))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "Th√™m sinh vi√™n th√†nh c√¥ng!")
                win.destroy()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m sinh vi√™n: {e}")
            conn.close()

    ttk.Button(win, text="Th√™m sinh vi√™n", command=add_new_student, bootstyle="success").grid(row=5, column=0, columnspan=2, pady=10)

# =================== QU·∫¢N L√ù B·∫¢NG ƒêI·ªÇM ======================
def manage_grades():
    grade_win = Toplevel()
    grade_win.title("Qu·∫£n l√Ω B·∫£ng ƒëi·ªÉm")
    grade_win.geometry("800x500")

    frame = ttk.Frame(grade_win)
    frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
    grade_win.rowconfigure(0, weight=1)
    grade_win.columnconfigure(0, weight=1)

    columns = ("M√£ SV", "H·ªç T√™n", "M√£ HP", "T√™n HP", "ƒêi·ªÉm")
    tree = ttk.Treeview(frame, columns=columns, show="headings")
    for col in columns:
        tree.heading(col, text=col)
    tree.grid(row=0, column=0, sticky="nsew")
    frame.rowconfigure(0, weight=1)
    frame.columnconfigure(0, weight=1)

    # G·ªçi stored procedure SP_SEL_PUBLIC_BANGDIEM v·ªõi current_manv v√† current_password
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("EXEC SP_SEL_PUBLIC_BANGDIEM ?, ?", (current_manv, current_password))
            for row in cursor.fetchall():
                tree.insert("", "end", values=row)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ truy v·∫•n b·∫£ng ƒëi·ªÉm: {e}")
        conn.close()

    btn_frame = ttk.Frame(grade_win)
    btn_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=5)
    btn_frame.columnconfigure((0,1,2), weight=1)

    def get_selected_grade():
        sel = tree.focus()
        if not sel:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ch·ªçn b·∫£n ghi c·∫ßn thao t√°c!")
            return None
        return tree.item(sel, "values")

    def edit_grade_action():
        sel = get_selected_grade()
        if sel:
            edit_grade(sel)

    def delete_grade_action():
        sel = get_selected_grade()
        if sel:
            delete_grade(sel)

    ttk.Button(btn_frame, text="Edit Grade", command=edit_grade_action, bootstyle="warning").grid(row=0, column=0, padx=5)
    ttk.Button(btn_frame, text="Delete Grade", command=delete_grade_action, bootstyle="danger").grid(row=0, column=1, padx=5)
    ttk.Button(btn_frame, text="Add New Grade", command=add_grade, bootstyle="success").grid(row=0, column=2, padx=5)

def edit_grade(record):
    # record: (MASV, HOTEN, MAHP, TENHP, DIEM)
    win = Toplevel()
    win.title(f"Ch·ªânh s·ª≠a ƒëi·ªÉm: {record[0]} - {record[2]}")
    win.geometry("400x200")

    ttk.Label(win, text="ƒêi·ªÉm thi:").grid(row=0, column=0, padx=10, pady=10, sticky="w")
    grade_entry = ttk.Entry(win)
    grade_entry.insert(0, record[4])
    grade_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
    win.columnconfigure(1, weight=1)

    def update_grade():
        try:
            new_grade = float(grade_entry.get().strip())
        except:
            messagebox.showwarning("Ch√∫ √Ω", "ƒêi·ªÉm ph·∫£i l√† s·ªë!")
            return
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            try:
                # S·ª≠ d·ª•ng stored procedure SP_INS_PUBLIC_BANGDIEM ƒë·ªÉ insert/update ƒëi·ªÉm
                cursor.execute("EXEC SP_INS_PUBLIC_BANGDIEM ?, ?, ?, ?", (current_manv, record[0], record[2], new_grade))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng!")
                win.destroy()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒëi·ªÉm: {e}")
            conn.close()

    ttk.Button(win, text="C·∫≠p nh·∫≠t", command=update_grade, bootstyle="primary").grid(row=1, column=0, columnspan=2, pady=10)

def delete_grade(record):
    if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° b·∫£n ghi n√†y kh√¥ng?"):
        return
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("DELETE FROM BANGDIEM WHERE MASV = ? AND MAHP = ?", (record[0], record[2]))
            conn.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "Xo√° ƒëi·ªÉm th√†nh c√¥ng!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xo√° ƒëi·ªÉm: {e}")
        conn.close()

def add_grade():
    win = Toplevel()
    win.title("Th√™m ƒëi·ªÉm m·ªõi")
    win.geometry("400x250")

    ttk.Label(win, text="M√£ SV:").grid(row=0, column=0, padx=10, pady=10, sticky="w")
    masv_entry = ttk.Entry(win)
    masv_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="M√£ HP:").grid(row=1, column=0, padx=10, pady=10, sticky="w")
    mahp_entry = ttk.Entry(win)
    mahp_entry.grid(row=1, column=1, padx=10, pady=10, sticky="ew")

    ttk.Label(win, text="ƒêi·ªÉm thi:").grid(row=2, column=0, padx=10, pady=10, sticky="w")
    grade_entry = ttk.Entry(win)
    grade_entry.grid(row=2, column=1, padx=10, pady=10, sticky="ew")

    win.columnconfigure(1, weight=1)

    def add_new_grade():
        masv = masv_entry.get().strip()
        mahp = mahp_entry.get().strip()
        try:
            grade_val = float(grade_entry.get().strip())
        except:
            messagebox.showwarning("Ch√∫ √Ω", "ƒêi·ªÉm ph·∫£i l√† s·ªë!")
            return
        if not masv or not mahp:
            messagebox.showwarning("Ch√∫ √Ω", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            try:
                cursor.execute("EXEC SP_INS_PUBLIC_BANGDIEM ?, ?, ?, ?", (current_manv, masv, mahp, grade_val))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "Th√™m ƒëi·ªÉm th√†nh c√¥ng!")
                win.destroy()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m ƒëi·ªÉm: {e}")
            conn.close()

    ttk.Button(win, text="Th√™m ƒëi·ªÉm", command=add_new_grade, bootstyle="success").grid(row=3, column=0, columnspan=2, pady=10)

# =================== GIAO DI·ªÜN ƒêƒÇNG NH·∫¨P ======================
login_window = ttk.Window(themename="superhero")
login_window.title("ƒêƒÉng nh·∫≠p Nh√¢n vi√™n")
login_window.geometry("800x600")

ttk.Label(login_window, text="M√£ nh√¢n vi√™n:", font=("Arial", 12)).pack(pady=10)
entry_username = ttk.Entry(login_window)
entry_username.pack(fill="x", padx=20)

ttk.Label(login_window, text="M·∫≠t kh·∫©u:", font=("Arial", 12)).pack(pady=10)
entry_password = ttk.Entry(login_window, show="*")
entry_password.pack(fill="x", padx=20)

ttk.Button(login_window, text="ƒêƒÉng nh·∫≠p", command=login, bootstyle="primary").pack(pady=20)

login_window.mainloop()
